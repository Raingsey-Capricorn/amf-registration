/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.amf.registration.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the AMFUser service. Represents a row in the &quot;amfuser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.amf.registration.model.impl.AMFUserModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.amf.registration.model.impl.AMFUserImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AMFUser
 * @generated
 */
@ProviderType
public interface AMFUserModel
	extends BaseModel<AMFUser>, GroupedModel, LocalizedModel, ShardedModel,
			StagedAuditedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a amf user model instance should use the {@link AMFUser} interface instead.
	 */

	/**
	 * Returns the primary key of this amf user.
	 *
	 * @return the primary key of this amf user
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this amf user.
	 *
	 * @param primaryKey the primary key of this amf user
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this amf user.
	 *
	 * @return the uuid of this amf user
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this amf user.
	 *
	 * @param uuid the uuid of this amf user
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the amf user ID of this amf user.
	 *
	 * @return the amf user ID of this amf user
	 */
	public long getAmfUserId();

	/**
	 * Sets the amf user ID of this amf user.
	 *
	 * @param amfUserId the amf user ID of this amf user
	 */
	public void setAmfUserId(long amfUserId);

	/**
	 * Returns the amf user uuid of this amf user.
	 *
	 * @return the amf user uuid of this amf user
	 */
	public String getAmfUserUuid();

	/**
	 * Sets the amf user uuid of this amf user.
	 *
	 * @param amfUserUuid the amf user uuid of this amf user
	 */
	public void setAmfUserUuid(String amfUserUuid);

	/**
	 * Returns the group ID of this amf user.
	 *
	 * @return the group ID of this amf user
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this amf user.
	 *
	 * @param groupId the group ID of this amf user
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this amf user.
	 *
	 * @return the company ID of this amf user
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this amf user.
	 *
	 * @param companyId the company ID of this amf user
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this amf user.
	 *
	 * @return the user ID of this amf user
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this amf user.
	 *
	 * @param userId the user ID of this amf user
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this amf user.
	 *
	 * @return the user uuid of this amf user
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this amf user.
	 *
	 * @param userUuid the user uuid of this amf user
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this amf user.
	 *
	 * @return the user name of this amf user
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this amf user.
	 *
	 * @param userName the user name of this amf user
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this amf user.
	 *
	 * @return the create date of this amf user
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this amf user.
	 *
	 * @param createDate the create date of this amf user
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this amf user.
	 *
	 * @return the modified date of this amf user
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this amf user.
	 *
	 * @param modifiedDate the modified date of this amf user
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the user creator ID of this amf user.
	 *
	 * @return the user creator ID of this amf user
	 */
	public long getUserCreatorID();

	/**
	 * Sets the user creator ID of this amf user.
	 *
	 * @param userCreatorID the user creator ID of this amf user
	 */
	public void setUserCreatorID(long userCreatorID);

	/**
	 * Returns the gender of this amf user.
	 *
	 * @return the gender of this amf user
	 */
	@AutoEscape
	public String getGender();

	/**
	 * Sets the gender of this amf user.
	 *
	 * @param gender the gender of this amf user
	 */
	public void setGender(String gender);

	/**
	 * Returns the home phone of this amf user.
	 *
	 * @return the home phone of this amf user
	 */
	@AutoEscape
	public String getHomePhone();

	/**
	 * Sets the home phone of this amf user.
	 *
	 * @param homePhone the home phone of this amf user
	 */
	public void setHomePhone(String homePhone);

	/**
	 * Returns the mobile phone of this amf user.
	 *
	 * @return the mobile phone of this amf user
	 */
	@AutoEscape
	public String getMobilePhone();

	/**
	 * Sets the mobile phone of this amf user.
	 *
	 * @param mobilePhone the mobile phone of this amf user
	 */
	public void setMobilePhone(String mobilePhone);

	/**
	 * Returns the address ID of this amf user.
	 *
	 * @return the address ID of this amf user
	 */
	public long getAddressID();

	/**
	 * Sets the address ID of this amf user.
	 *
	 * @param addressID the address ID of this amf user
	 */
	public void setAddressID(long addressID);

	/**
	 * Returns the security question of this amf user.
	 *
	 * @return the security question of this amf user
	 */
	public String getSecurityQuestion();

	/**
	 * Returns the localized security question of this amf user in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized security question of this amf user
	 */
	@AutoEscape
	public String getSecurityQuestion(Locale locale);

	/**
	 * Returns the localized security question of this amf user in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized security question of this amf user. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSecurityQuestion(Locale locale, boolean useDefault);

	/**
	 * Returns the localized security question of this amf user in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized security question of this amf user
	 */
	@AutoEscape
	public String getSecurityQuestion(String languageId);

	/**
	 * Returns the localized security question of this amf user in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized security question of this amf user
	 */
	@AutoEscape
	public String getSecurityQuestion(String languageId, boolean useDefault);

	@AutoEscape
	public String getSecurityQuestionCurrentLanguageId();

	@AutoEscape
	public String getSecurityQuestionCurrentValue();

	/**
	 * Returns a map of the locales and localized security questions of this amf user.
	 *
	 * @return the locales and localized security questions of this amf user
	 */
	public Map<Locale, String> getSecurityQuestionMap();

	/**
	 * Sets the security question of this amf user.
	 *
	 * @param securityQuestion the security question of this amf user
	 */
	public void setSecurityQuestion(String securityQuestion);

	/**
	 * Sets the localized security question of this amf user in the language.
	 *
	 * @param securityQuestion the localized security question of this amf user
	 * @param locale the locale of the language
	 */
	public void setSecurityQuestion(String securityQuestion, Locale locale);

	/**
	 * Sets the localized security question of this amf user in the language, and sets the default locale.
	 *
	 * @param securityQuestion the localized security question of this amf user
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSecurityQuestion(
		String securityQuestion, Locale locale, Locale defaultLocale);

	public void setSecurityQuestionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized security questions of this amf user from the map of locales and localized security questions.
	 *
	 * @param securityQuestionMap the locales and localized security questions of this amf user
	 */
	public void setSecurityQuestionMap(Map<Locale, String> securityQuestionMap);

	/**
	 * Sets the localized security questions of this amf user from the map of locales and localized security questions, and sets the default locale.
	 *
	 * @param securityQuestionMap the locales and localized security questions of this amf user
	 * @param defaultLocale the default locale
	 */
	public void setSecurityQuestionMap(
		Map<Locale, String> securityQuestionMap, Locale defaultLocale);

	/**
	 * Returns the security answer of this amf user.
	 *
	 * @return the security answer of this amf user
	 */
	public String getSecurityAnswer();

	/**
	 * Returns the localized security answer of this amf user in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized security answer of this amf user
	 */
	@AutoEscape
	public String getSecurityAnswer(Locale locale);

	/**
	 * Returns the localized security answer of this amf user in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized security answer of this amf user. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSecurityAnswer(Locale locale, boolean useDefault);

	/**
	 * Returns the localized security answer of this amf user in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized security answer of this amf user
	 */
	@AutoEscape
	public String getSecurityAnswer(String languageId);

	/**
	 * Returns the localized security answer of this amf user in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized security answer of this amf user
	 */
	@AutoEscape
	public String getSecurityAnswer(String languageId, boolean useDefault);

	@AutoEscape
	public String getSecurityAnswerCurrentLanguageId();

	@AutoEscape
	public String getSecurityAnswerCurrentValue();

	/**
	 * Returns a map of the locales and localized security answers of this amf user.
	 *
	 * @return the locales and localized security answers of this amf user
	 */
	public Map<Locale, String> getSecurityAnswerMap();

	/**
	 * Sets the security answer of this amf user.
	 *
	 * @param securityAnswer the security answer of this amf user
	 */
	public void setSecurityAnswer(String securityAnswer);

	/**
	 * Sets the localized security answer of this amf user in the language.
	 *
	 * @param securityAnswer the localized security answer of this amf user
	 * @param locale the locale of the language
	 */
	public void setSecurityAnswer(String securityAnswer, Locale locale);

	/**
	 * Sets the localized security answer of this amf user in the language, and sets the default locale.
	 *
	 * @param securityAnswer the localized security answer of this amf user
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSecurityAnswer(
		String securityAnswer, Locale locale, Locale defaultLocale);

	public void setSecurityAnswerCurrentLanguageId(String languageId);

	/**
	 * Sets the localized security answers of this amf user from the map of locales and localized security answers.
	 *
	 * @param securityAnswerMap the locales and localized security answers of this amf user
	 */
	public void setSecurityAnswerMap(Map<Locale, String> securityAnswerMap);

	/**
	 * Sets the localized security answers of this amf user from the map of locales and localized security answers, and sets the default locale.
	 *
	 * @param securityAnswerMap the locales and localized security answers of this amf user
	 * @param defaultLocale the default locale
	 */
	public void setSecurityAnswerMap(
		Map<Locale, String> securityAnswerMap, Locale defaultLocale);

	/**
	 * Returns the accepted tou of this amf user.
	 *
	 * @return the accepted tou of this amf user
	 */
	public String getAcceptedTOU();

	/**
	 * Returns the localized accepted tou of this amf user in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized accepted tou of this amf user
	 */
	@AutoEscape
	public String getAcceptedTOU(Locale locale);

	/**
	 * Returns the localized accepted tou of this amf user in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized accepted tou of this amf user. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAcceptedTOU(Locale locale, boolean useDefault);

	/**
	 * Returns the localized accepted tou of this amf user in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized accepted tou of this amf user
	 */
	@AutoEscape
	public String getAcceptedTOU(String languageId);

	/**
	 * Returns the localized accepted tou of this amf user in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized accepted tou of this amf user
	 */
	@AutoEscape
	public String getAcceptedTOU(String languageId, boolean useDefault);

	@AutoEscape
	public String getAcceptedTOUCurrentLanguageId();

	@AutoEscape
	public String getAcceptedTOUCurrentValue();

	/**
	 * Returns a map of the locales and localized accepted tous of this amf user.
	 *
	 * @return the locales and localized accepted tous of this amf user
	 */
	public Map<Locale, String> getAcceptedTOUMap();

	/**
	 * Sets the accepted tou of this amf user.
	 *
	 * @param acceptedTOU the accepted tou of this amf user
	 */
	public void setAcceptedTOU(String acceptedTOU);

	/**
	 * Sets the localized accepted tou of this amf user in the language.
	 *
	 * @param acceptedTOU the localized accepted tou of this amf user
	 * @param locale the locale of the language
	 */
	public void setAcceptedTOU(String acceptedTOU, Locale locale);

	/**
	 * Sets the localized accepted tou of this amf user in the language, and sets the default locale.
	 *
	 * @param acceptedTOU the localized accepted tou of this amf user
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAcceptedTOU(
		String acceptedTOU, Locale locale, Locale defaultLocale);

	public void setAcceptedTOUCurrentLanguageId(String languageId);

	/**
	 * Sets the localized accepted tous of this amf user from the map of locales and localized accepted tous.
	 *
	 * @param acceptedTOUMap the locales and localized accepted tous of this amf user
	 */
	public void setAcceptedTOUMap(Map<Locale, String> acceptedTOUMap);

	/**
	 * Sets the localized accepted tous of this amf user from the map of locales and localized accepted tous, and sets the default locale.
	 *
	 * @param acceptedTOUMap the locales and localized accepted tous of this amf user
	 * @param defaultLocale the default locale
	 */
	public void setAcceptedTOUMap(
		Map<Locale, String> acceptedTOUMap, Locale defaultLocale);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

}