/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.amf.registration.model.impl;

import com.amf.registration.model.AMFUser;
import com.amf.registration.model.AMFUserModel;
import com.amf.registration.model.AMFUserSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AMFUser service. Represents a row in the &quot;amfuser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AMFUserModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AMFUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AMFUserImpl
 * @generated
 */
@JSON(strict = true)
public class AMFUserModelImpl
	extends BaseModelImpl<AMFUser> implements AMFUserModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a amf user model instance should use the <code>AMFUser</code> interface instead.
	 */
	public static final String TABLE_NAME = "amfuser";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"amfUserId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"userCreatorID", Types.BIGINT}, {"gender", Types.VARCHAR},
		{"homePhone", Types.VARCHAR}, {"mobilePhone", Types.VARCHAR},
		{"addressID", Types.BIGINT}, {"securityQuestion", Types.VARCHAR},
		{"securityAnswer", Types.VARCHAR}, {"acceptedTOU", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("amfUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userCreatorID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobilePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("securityQuestion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityAnswer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("acceptedTOU", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table amfuser (uuid_ VARCHAR(75) null,amfUserId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,userCreatorID LONG,gender VARCHAR(75) null,homePhone VARCHAR(75) null,mobilePhone VARCHAR(75) null,addressID LONG,securityQuestion STRING null,securityAnswer STRING null,acceptedTOU STRING null)";

	public static final String TABLE_SQL_DROP = "drop table amfuser";

	public static final String ORDER_BY_JPQL = " ORDER BY amfUser.userName ASC";

	public static final String ORDER_BY_SQL = " ORDER BY amfuser.userName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long USERNAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static AMFUser toModel(AMFUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AMFUser model = new AMFUserImpl();

		model.setUuid(soapModel.getUuid());
		model.setAmfUserId(soapModel.getAmfUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setUserCreatorID(soapModel.getUserCreatorID());
		model.setGender(soapModel.getGender());
		model.setHomePhone(soapModel.getHomePhone());
		model.setMobilePhone(soapModel.getMobilePhone());
		model.setAddressID(soapModel.getAddressID());
		model.setSecurityQuestion(soapModel.getSecurityQuestion());
		model.setSecurityAnswer(soapModel.getSecurityAnswer());
		model.setAcceptedTOU(soapModel.getAcceptedTOU());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<AMFUser> toModels(AMFUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AMFUser> models = new ArrayList<AMFUser>(soapModels.length);

		for (AMFUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AMFUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _amfUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAmfUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _amfUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AMFUser.class;
	}

	@Override
	public String getModelClassName() {
		return AMFUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AMFUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AMFUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AMFUser, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((AMFUser)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AMFUser, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AMFUser, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AMFUser)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AMFUser, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AMFUser, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AMFUser>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AMFUser.class.getClassLoader(), AMFUser.class, ModelWrapper.class);

		try {
			Constructor<AMFUser> constructor =
				(Constructor<AMFUser>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AMFUser, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AMFUser, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AMFUser, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AMFUser, Object>>();
		Map<String, BiConsumer<AMFUser, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AMFUser, ?>>();

		attributeGetterFunctions.put("uuid", AMFUser::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<AMFUser, String>)AMFUser::setUuid);
		attributeGetterFunctions.put("amfUserId", AMFUser::getAmfUserId);
		attributeSetterBiConsumers.put(
			"amfUserId", (BiConsumer<AMFUser, Long>)AMFUser::setAmfUserId);
		attributeGetterFunctions.put("groupId", AMFUser::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<AMFUser, Long>)AMFUser::setGroupId);
		attributeGetterFunctions.put("companyId", AMFUser::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<AMFUser, Long>)AMFUser::setCompanyId);
		attributeGetterFunctions.put("userId", AMFUser::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<AMFUser, Long>)AMFUser::setUserId);
		attributeGetterFunctions.put("userName", AMFUser::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<AMFUser, String>)AMFUser::setUserName);
		attributeGetterFunctions.put("createDate", AMFUser::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<AMFUser, Date>)AMFUser::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", AMFUser::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<AMFUser, Date>)AMFUser::setModifiedDate);
		attributeGetterFunctions.put(
			"userCreatorID", AMFUser::getUserCreatorID);
		attributeSetterBiConsumers.put(
			"userCreatorID",
			(BiConsumer<AMFUser, Long>)AMFUser::setUserCreatorID);
		attributeGetterFunctions.put("gender", AMFUser::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<AMFUser, String>)AMFUser::setGender);
		attributeGetterFunctions.put("homePhone", AMFUser::getHomePhone);
		attributeSetterBiConsumers.put(
			"homePhone", (BiConsumer<AMFUser, String>)AMFUser::setHomePhone);
		attributeGetterFunctions.put("mobilePhone", AMFUser::getMobilePhone);
		attributeSetterBiConsumers.put(
			"mobilePhone",
			(BiConsumer<AMFUser, String>)AMFUser::setMobilePhone);
		attributeGetterFunctions.put("addressID", AMFUser::getAddressID);
		attributeSetterBiConsumers.put(
			"addressID", (BiConsumer<AMFUser, Long>)AMFUser::setAddressID);
		attributeGetterFunctions.put(
			"securityQuestion", AMFUser::getSecurityQuestion);
		attributeSetterBiConsumers.put(
			"securityQuestion",
			(BiConsumer<AMFUser, String>)AMFUser::setSecurityQuestion);
		attributeGetterFunctions.put(
			"securityAnswer", AMFUser::getSecurityAnswer);
		attributeSetterBiConsumers.put(
			"securityAnswer",
			(BiConsumer<AMFUser, String>)AMFUser::setSecurityAnswer);
		attributeGetterFunctions.put("acceptedTOU", AMFUser::getAcceptedTOU);
		attributeSetterBiConsumers.put(
			"acceptedTOU",
			(BiConsumer<AMFUser, String>)AMFUser::setAcceptedTOU);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAmfUserId() {
		return _amfUserId;
	}

	@Override
	public void setAmfUserId(long amfUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amfUserId = amfUserId;
	}

	@Override
	public String getAmfUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getAmfUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setAmfUserUuid(String amfUserUuid) {
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getUserCreatorID() {
		return _userCreatorID;
	}

	@Override
	public void setUserCreatorID(long userCreatorID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userCreatorID = userCreatorID;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public String getHomePhone() {
		if (_homePhone == null) {
			return "";
		}
		else {
			return _homePhone;
		}
	}

	@Override
	public void setHomePhone(String homePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homePhone = homePhone;
	}

	@JSON
	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return "";
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobilePhone = mobilePhone;
	}

	@JSON
	@Override
	public long getAddressID() {
		return _addressID;
	}

	@Override
	public void setAddressID(long addressID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressID = addressID;
	}

	@JSON
	@Override
	public String getSecurityQuestion() {
		if (_securityQuestion == null) {
			return "";
		}
		else {
			return _securityQuestion;
		}
	}

	@Override
	public String getSecurityQuestion(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSecurityQuestion(languageId);
	}

	@Override
	public String getSecurityQuestion(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSecurityQuestion(languageId, useDefault);
	}

	@Override
	public String getSecurityQuestion(String languageId) {
		return LocalizationUtil.getLocalization(
			getSecurityQuestion(), languageId);
	}

	@Override
	public String getSecurityQuestion(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSecurityQuestion(), languageId, useDefault);
	}

	@Override
	public String getSecurityQuestionCurrentLanguageId() {
		return _securityQuestionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSecurityQuestionCurrentValue() {
		Locale locale = getLocale(_securityQuestionCurrentLanguageId);

		return getSecurityQuestion(locale);
	}

	@Override
	public Map<Locale, String> getSecurityQuestionMap() {
		return LocalizationUtil.getLocalizationMap(getSecurityQuestion());
	}

	@Override
	public void setSecurityQuestion(String securityQuestion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityQuestion = securityQuestion;
	}

	@Override
	public void setSecurityQuestion(String securityQuestion, Locale locale) {
		setSecurityQuestion(
			securityQuestion, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSecurityQuestion(
		String securityQuestion, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(securityQuestion)) {
			setSecurityQuestion(
				LocalizationUtil.updateLocalization(
					getSecurityQuestion(), "SecurityQuestion", securityQuestion,
					languageId, defaultLanguageId));
		}
		else {
			setSecurityQuestion(
				LocalizationUtil.removeLocalization(
					getSecurityQuestion(), "SecurityQuestion", languageId));
		}
	}

	@Override
	public void setSecurityQuestionCurrentLanguageId(String languageId) {
		_securityQuestionCurrentLanguageId = languageId;
	}

	@Override
	public void setSecurityQuestionMap(
		Map<Locale, String> securityQuestionMap) {

		setSecurityQuestionMap(
			securityQuestionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSecurityQuestionMap(
		Map<Locale, String> securityQuestionMap, Locale defaultLocale) {

		if (securityQuestionMap == null) {
			return;
		}

		setSecurityQuestion(
			LocalizationUtil.updateLocalization(
				securityQuestionMap, getSecurityQuestion(), "SecurityQuestion",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getSecurityAnswer() {
		if (_securityAnswer == null) {
			return "";
		}
		else {
			return _securityAnswer;
		}
	}

	@Override
	public String getSecurityAnswer(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSecurityAnswer(languageId);
	}

	@Override
	public String getSecurityAnswer(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSecurityAnswer(languageId, useDefault);
	}

	@Override
	public String getSecurityAnswer(String languageId) {
		return LocalizationUtil.getLocalization(
			getSecurityAnswer(), languageId);
	}

	@Override
	public String getSecurityAnswer(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSecurityAnswer(), languageId, useDefault);
	}

	@Override
	public String getSecurityAnswerCurrentLanguageId() {
		return _securityAnswerCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSecurityAnswerCurrentValue() {
		Locale locale = getLocale(_securityAnswerCurrentLanguageId);

		return getSecurityAnswer(locale);
	}

	@Override
	public Map<Locale, String> getSecurityAnswerMap() {
		return LocalizationUtil.getLocalizationMap(getSecurityAnswer());
	}

	@Override
	public void setSecurityAnswer(String securityAnswer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityAnswer = securityAnswer;
	}

	@Override
	public void setSecurityAnswer(String securityAnswer, Locale locale) {
		setSecurityAnswer(securityAnswer, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSecurityAnswer(
		String securityAnswer, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(securityAnswer)) {
			setSecurityAnswer(
				LocalizationUtil.updateLocalization(
					getSecurityAnswer(), "SecurityAnswer", securityAnswer,
					languageId, defaultLanguageId));
		}
		else {
			setSecurityAnswer(
				LocalizationUtil.removeLocalization(
					getSecurityAnswer(), "SecurityAnswer", languageId));
		}
	}

	@Override
	public void setSecurityAnswerCurrentLanguageId(String languageId) {
		_securityAnswerCurrentLanguageId = languageId;
	}

	@Override
	public void setSecurityAnswerMap(Map<Locale, String> securityAnswerMap) {
		setSecurityAnswerMap(securityAnswerMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSecurityAnswerMap(
		Map<Locale, String> securityAnswerMap, Locale defaultLocale) {

		if (securityAnswerMap == null) {
			return;
		}

		setSecurityAnswer(
			LocalizationUtil.updateLocalization(
				securityAnswerMap, getSecurityAnswer(), "SecurityAnswer",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAcceptedTOU() {
		if (_acceptedTOU == null) {
			return "";
		}
		else {
			return _acceptedTOU;
		}
	}

	@Override
	public String getAcceptedTOU(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAcceptedTOU(languageId);
	}

	@Override
	public String getAcceptedTOU(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAcceptedTOU(languageId, useDefault);
	}

	@Override
	public String getAcceptedTOU(String languageId) {
		return LocalizationUtil.getLocalization(getAcceptedTOU(), languageId);
	}

	@Override
	public String getAcceptedTOU(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getAcceptedTOU(), languageId, useDefault);
	}

	@Override
	public String getAcceptedTOUCurrentLanguageId() {
		return _acceptedTOUCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAcceptedTOUCurrentValue() {
		Locale locale = getLocale(_acceptedTOUCurrentLanguageId);

		return getAcceptedTOU(locale);
	}

	@Override
	public Map<Locale, String> getAcceptedTOUMap() {
		return LocalizationUtil.getLocalizationMap(getAcceptedTOU());
	}

	@Override
	public void setAcceptedTOU(String acceptedTOU) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acceptedTOU = acceptedTOU;
	}

	@Override
	public void setAcceptedTOU(String acceptedTOU, Locale locale) {
		setAcceptedTOU(acceptedTOU, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAcceptedTOU(
		String acceptedTOU, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(acceptedTOU)) {
			setAcceptedTOU(
				LocalizationUtil.updateLocalization(
					getAcceptedTOU(), "AcceptedTOU", acceptedTOU, languageId,
					defaultLanguageId));
		}
		else {
			setAcceptedTOU(
				LocalizationUtil.removeLocalization(
					getAcceptedTOU(), "AcceptedTOU", languageId));
		}
	}

	@Override
	public void setAcceptedTOUCurrentLanguageId(String languageId) {
		_acceptedTOUCurrentLanguageId = languageId;
	}

	@Override
	public void setAcceptedTOUMap(Map<Locale, String> acceptedTOUMap) {
		setAcceptedTOUMap(acceptedTOUMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAcceptedTOUMap(
		Map<Locale, String> acceptedTOUMap, Locale defaultLocale) {

		if (acceptedTOUMap == null) {
			return;
		}

		setAcceptedTOU(
			LocalizationUtil.updateLocalization(
				acceptedTOUMap, getAcceptedTOU(), "AcceptedTOU",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AMFUser.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AMFUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> securityQuestionMap = getSecurityQuestionMap();

		for (Map.Entry<Locale, String> entry : securityQuestionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> securityAnswerMap = getSecurityAnswerMap();

		for (Map.Entry<Locale, String> entry : securityAnswerMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> acceptedTOUMap = getAcceptedTOUMap();

		for (Map.Entry<Locale, String> entry : acceptedTOUMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getSecurityQuestion();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			AMFUser.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String securityQuestion = getSecurityQuestion(defaultLocale);

		if (Validator.isNull(securityQuestion)) {
			setSecurityQuestion(
				getSecurityQuestion(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSecurityQuestion(
				getSecurityQuestion(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String securityAnswer = getSecurityAnswer(defaultLocale);

		if (Validator.isNull(securityAnswer)) {
			setSecurityAnswer(
				getSecurityAnswer(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSecurityAnswer(
				getSecurityAnswer(defaultLocale), defaultLocale, defaultLocale);
		}

		String acceptedTOU = getAcceptedTOU(defaultLocale);

		if (Validator.isNull(acceptedTOU)) {
			setAcceptedTOU(
				getAcceptedTOU(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAcceptedTOU(
				getAcceptedTOU(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public AMFUser toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AMFUser>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AMFUserImpl amfUserImpl = new AMFUserImpl();

		amfUserImpl.setUuid(getUuid());
		amfUserImpl.setAmfUserId(getAmfUserId());
		amfUserImpl.setGroupId(getGroupId());
		amfUserImpl.setCompanyId(getCompanyId());
		amfUserImpl.setUserId(getUserId());
		amfUserImpl.setUserName(getUserName());
		amfUserImpl.setCreateDate(getCreateDate());
		amfUserImpl.setModifiedDate(getModifiedDate());
		amfUserImpl.setUserCreatorID(getUserCreatorID());
		amfUserImpl.setGender(getGender());
		amfUserImpl.setHomePhone(getHomePhone());
		amfUserImpl.setMobilePhone(getMobilePhone());
		amfUserImpl.setAddressID(getAddressID());
		amfUserImpl.setSecurityQuestion(getSecurityQuestion());
		amfUserImpl.setSecurityAnswer(getSecurityAnswer());
		amfUserImpl.setAcceptedTOU(getAcceptedTOU());

		amfUserImpl.resetOriginalValues();

		return amfUserImpl;
	}

	@Override
	public int compareTo(AMFUser amfUser) {
		int value = 0;

		value = getUserName().compareTo(amfUser.getUserName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AMFUser)) {
			return false;
		}

		AMFUser amfUser = (AMFUser)object;

		long primaryKey = amfUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AMFUser> toCacheModel() {
		AMFUserCacheModel amfUserCacheModel = new AMFUserCacheModel();

		amfUserCacheModel.uuid = getUuid();

		String uuid = amfUserCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			amfUserCacheModel.uuid = null;
		}

		amfUserCacheModel.amfUserId = getAmfUserId();

		amfUserCacheModel.groupId = getGroupId();

		amfUserCacheModel.companyId = getCompanyId();

		amfUserCacheModel.userId = getUserId();

		amfUserCacheModel.userName = getUserName();

		String userName = amfUserCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			amfUserCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			amfUserCacheModel.createDate = createDate.getTime();
		}
		else {
			amfUserCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			amfUserCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			amfUserCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		amfUserCacheModel.userCreatorID = getUserCreatorID();

		amfUserCacheModel.gender = getGender();

		String gender = amfUserCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			amfUserCacheModel.gender = null;
		}

		amfUserCacheModel.homePhone = getHomePhone();

		String homePhone = amfUserCacheModel.homePhone;

		if ((homePhone != null) && (homePhone.length() == 0)) {
			amfUserCacheModel.homePhone = null;
		}

		amfUserCacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = amfUserCacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			amfUserCacheModel.mobilePhone = null;
		}

		amfUserCacheModel.addressID = getAddressID();

		amfUserCacheModel.securityQuestion = getSecurityQuestion();

		String securityQuestion = amfUserCacheModel.securityQuestion;

		if ((securityQuestion != null) && (securityQuestion.length() == 0)) {
			amfUserCacheModel.securityQuestion = null;
		}

		amfUserCacheModel.securityAnswer = getSecurityAnswer();

		String securityAnswer = amfUserCacheModel.securityAnswer;

		if ((securityAnswer != null) && (securityAnswer.length() == 0)) {
			amfUserCacheModel.securityAnswer = null;
		}

		amfUserCacheModel.acceptedTOU = getAcceptedTOU();

		String acceptedTOU = amfUserCacheModel.acceptedTOU;

		if ((acceptedTOU != null) && (acceptedTOU.length() == 0)) {
			amfUserCacheModel.acceptedTOU = null;
		}

		return amfUserCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AMFUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AMFUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AMFUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AMFUser)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AMFUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AMFUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AMFUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AMFUser)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AMFUser>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _amfUserId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _userCreatorID;
	private String _gender;
	private String _homePhone;
	private String _mobilePhone;
	private long _addressID;
	private String _securityQuestion;
	private String _securityQuestionCurrentLanguageId;
	private String _securityAnswer;
	private String _securityAnswerCurrentLanguageId;
	private String _acceptedTOU;
	private String _acceptedTOUCurrentLanguageId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AMFUser, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AMFUser)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("amfUserId", _amfUserId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("userCreatorID", _userCreatorID);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("homePhone", _homePhone);
		_columnOriginalValues.put("mobilePhone", _mobilePhone);
		_columnOriginalValues.put("addressID", _addressID);
		_columnOriginalValues.put("securityQuestion", _securityQuestion);
		_columnOriginalValues.put("securityAnswer", _securityAnswer);
		_columnOriginalValues.put("acceptedTOU", _acceptedTOU);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("amfUserId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("userCreatorID", 256L);

		columnBitmasks.put("gender", 512L);

		columnBitmasks.put("homePhone", 1024L);

		columnBitmasks.put("mobilePhone", 2048L);

		columnBitmasks.put("addressID", 4096L);

		columnBitmasks.put("securityQuestion", 8192L);

		columnBitmasks.put("securityAnswer", 16384L);

		columnBitmasks.put("acceptedTOU", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AMFUser _escapedModel;

}